-- Autogenerated: do not edit this file
CREATE TABLE BATCH_JOB_INSTANCE  (
	JOB_INSTANCE_ID BIGINT IDENTITY NOT NULL PRIMARY KEY ,
	VERSION BIGINT ,
	JOB_NAME VARCHAR(100) NOT NULL,
	JOB_KEY VARCHAR(32) NOT NULL,
	constraint JOB_INST_UN unique (JOB_NAME, JOB_KEY)
) ;

CREATE TABLE BATCH_JOB_EXECUTION  (
	JOB_EXECUTION_ID BIGINT IDENTITY NOT NULL PRIMARY KEY ,
	VERSION BIGINT  ,
	JOB_INSTANCE_ID BIGINT NOT NULL,
	CREATE_TIME TIMESTAMP NOT NULL,
	START_TIME TIMESTAMP DEFAULT NULL ,
	END_TIME TIMESTAMP DEFAULT NULL ,
	STATUS VARCHAR(10) ,
	EXIT_CODE VARCHAR(2500) ,
	EXIT_MESSAGE VARCHAR(2500) ,
	LAST_UPDATED TIMESTAMP,
	JOB_CONFIGURATION_LOCATION VARCHAR(2500) NULL,
	constraint JOB_INST_EXEC_FK foreign key (JOB_INSTANCE_ID)
	references BATCH_JOB_INSTANCE(JOB_INSTANCE_ID)
) ;

CREATE TABLE BATCH_JOB_EXECUTION_PARAMS  (
	JOB_EXECUTION_ID BIGINT NOT NULL ,
	TYPE_CD VARCHAR(6) NOT NULL ,
	KEY_NAME VARCHAR(100) NOT NULL ,
	STRING_VAL VARCHAR(250) ,
	DATE_VAL TIMESTAMP DEFAULT NULL ,
	LONG_VAL BIGINT ,
	DOUBLE_VAL DOUBLE PRECISION ,
	IDENTIFYING CHAR(1) NOT NULL ,
	constraint JOB_EXEC_PARAMS_FK foreign key (JOB_EXECUTION_ID)
	references BATCH_JOB_EXECUTION(JOB_EXECUTION_ID)
) ;

CREATE TABLE BATCH_STEP_EXECUTION  (
	STEP_EXECUTION_ID BIGINT IDENTITY NOT NULL PRIMARY KEY ,
	VERSION BIGINT NOT NULL,
	STEP_NAME VARCHAR(100) NOT NULL,
	JOB_EXECUTION_ID BIGINT NOT NULL,
	START_TIME TIMESTAMP NOT NULL ,
	END_TIME TIMESTAMP DEFAULT NULL ,
	STATUS VARCHAR(10) ,
	COMMIT_COUNT BIGINT ,
	READ_COUNT BIGINT ,
	FILTER_COUNT BIGINT ,
	WRITE_COUNT BIGINT ,
	READ_SKIP_COUNT BIGINT ,
	WRITE_SKIP_COUNT BIGINT ,
	PROCESS_SKIP_COUNT BIGINT ,
	ROLLBACK_COUNT BIGINT ,
	EXIT_CODE VARCHAR(2500) ,
	EXIT_MESSAGE VARCHAR(2500) ,
	LAST_UPDATED TIMESTAMP,
	constraint JOB_EXEC_STEP_FK foreign key (JOB_EXECUTION_ID)
	references BATCH_JOB_EXECUTION(JOB_EXECUTION_ID)
) ;

CREATE TABLE BATCH_STEP_EXECUTION_CONTEXT  (
	STEP_EXECUTION_ID BIGINT NOT NULL PRIMARY KEY,
	SHORT_CONTEXT VARCHAR(2500) NOT NULL,
	SERIALIZED_CONTEXT LONGVARCHAR ,
	constraint STEP_EXEC_CTX_FK foreign key (STEP_EXECUTION_ID)
	references BATCH_STEP_EXECUTION(STEP_EXECUTION_ID)
) ;

CREATE TABLE BATCH_JOB_EXECUTION_CONTEXT  (
	JOB_EXECUTION_ID BIGINT NOT NULL PRIMARY KEY,
	SHORT_CONTEXT VARCHAR(2500) NOT NULL,
	SERIALIZED_CONTEXT LONGVARCHAR ,
	constraint JOB_EXEC_CTX_FK foreign key (JOB_EXECUTION_ID)
	references BATCH_JOB_EXECUTION(JOB_EXECUTION_ID)
) ;

CREATE SEQUENCE BATCH_STEP_EXECUTION_SEQ;
CREATE SEQUENCE BATCH_JOB_EXECUTION_SEQ;
CREATE SEQUENCE BATCH_JOB_SEQ;

create table if not exists book_details (
    isbn varchar(13) not null primary key,
    title varchar(128) not null,
    series_code varchar(32),
    publisher_code varchar(32) not null,
    publish_date date not null,
    lage_thumbnail_url varchar(128),
    medium_thumbnail_url varchar(128),
    small_thumbnail_url varchar(128),
    description clob,
    price double,
    created_at timestamp not null
);
alter table book_details add column if not exists upstream_target boolean not null default false;
create index if not exists book_publish_date_index on book_details (publish_date);
create index if not exists book_created_at_index on book_details (created_at desc);

create table if not exists book_detail_divisions (
    isbn varchar(13) not null,
    division_code varchar(32) not null,

    foreign key (isbn) references book_details(isbn)
);

create table if not exists book_detail_authors (
    isbn varchar(13) not null,
    author varchar(32) not null,

    foreign key (isbn) references book_details(isbn)
);

create table if not exists book_detail_keywords (
    isbn varchar(13) not null,
    keyword varchar(32) not null,

    foreign key (isbn) references book_details(isbn)
);

create table if not exists book_detail_originals (
    isbn varchar(32) not null,
    property varchar(32) not null,
    mapping_type varchar(32) not null,
    value varchar(1024),

    foreign key (isbn) references book_details(isbn)
);

create table if not exists divisions (
    division_code varchar(32) not null primary key,
    depth integer not null
);
alter table divisions add column if not exists name varchar(32);

create table if not exists division_raw_mappings (
    division_code varchar(32) not null,
    raw varchar(32) not null,
    mapping_type varchar(32) not null,

    foreign key (division_code) references divisions(division_code)
);

create table if not exists publishers (
    publisher_code varchar(32) not null primary key
);
alter table publishers add column if not exists name varchar(32);

create table if not exists publisher_raw_mappings (
    publisher_code varchar(32) not null,
    raw varchar(32) not null,
    mapping_type varchar(32) not null,

    foreign key (publisher_code) references publishers(publisher_code)
);
alter table publisher_raw_mappings alter column raw varchar(64) not null;

create table if not exists publisher_keyword_mappings (
    publisher_code varchar(32) not null,
    keyword varchar(32) not null,
    mapping_type varchar(32) not null,

    foreign key (publisher_code) references publishers(publisher_code)
);

create table if not exists book_original_filters (
    id varchar(32) not null primary key,
    name varchar(32) not null,
    mapping_type varchar(32) not null,
    is_root boolean not null,
    operator_type varchar(32),
    property_name varchar(32),
    regex varchar(128),
    parent_id varchar(32),

    foreign key (parent_id) references book_original_filters(id)
);